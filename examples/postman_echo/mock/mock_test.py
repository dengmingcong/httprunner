# NOTE: Generated By HttpRunner v3.1.4
# FROM: request_methods/request_with_functions.yml


from httprunner import HttpRunner, Config, Step, RunRequest
from httprunner.configs.mock import mock_settings

mock_settings.is_enabled = True


class TestCaseRequestWithFunctions(HttpRunner):

    config = (
        Config("request with functions")
        .variables(
            **{
                "foo1": "testcase_ref_bar11",
                "foo2": "testsuite_config_bar2",
                "expect_foo1": "testcase_ref_bar11",
                "expect_foo2": "testsuite_config_bar2",
            }
        )
        .base_url("https://postman-echo.com")
        .verify(False)
        .locust_weight(2)
    )

    teststeps = [
        Step(
            RunRequest("mock form data")
            .with_variables(**{"foo2": "bar23"})
            .post("/post")
            .with_headers(
                **{
                    "User-Agent": "HttpRunner",
                    "Content-Type": "application/x-www-form-urlencoded",
                }
            )
            .with_data("foo2=$foo2")
            .mock(
                {
                    "form": {
                        "foo2": "$foo2",
                        "mock": "mock",
                    },
                },
                {
                    "Server": "nginx/1.24.0",
                    "Date": "Fri, 08 Mar 2024 07:41:38 GMT",
                    "Content-Type": "application/json;charset=UTF-8",
                    "foo2": "$foo2",
                },
            )
            .validate()
            .assert_equal("status_code", 200, "response status code should be 200")
            .assert_equal("body.form.mock", "mock")
            .assert_equal("headers.foo2", "$foo2")
        ),
        Step(
            RunRequest("mock with json")
            .with_variables(**{"foo2": "bar23", "foo": {"a": "b"}})
            .post("/post")
            .with_headers(
                **{
                    "User-Agent": "HttpRunner",
                    "Content-Type": "application/x-www-form-urlencoded",
                }
            )
            .with_json({"data": {"foo2": "$foo2"}})
            .mock("$foo")
            .validate()
            .assert_equal("status_code", 200, "response status code should be 404")
            .assert_equal("body.a", "b")
        ),
    ]


if __name__ == "__main__":
    TestCaseRequestWithFunctions().test_start()
