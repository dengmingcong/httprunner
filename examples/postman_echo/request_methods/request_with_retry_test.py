# NOTE: Generated By HttpRunner v3.1.4
# FROM: request_methods/request_with_functions.yml
import time

from httprunner import HttpRunner, Config, Step, RunRequest
from httprunner.testcase import HttpRunnerRequest, RequestConfig


class BaseApi(HttpRunnerRequest):
    config = RequestConfig("default name").variables(
        **{
            "foo": "${gen_trace_id()}",
        }
    )
    request = RunRequest("").post("/post")


class TestParseVariablesEachTry(HttpRunner):

    config = (
        Config("test parsing variables each try")
        .variables(**{"timestamp": int(time.time()) * 1000})
        .base_url("https://postman-echo.com")
        .verify(False)
    )

    teststeps = [
        Step(
            BaseApi()
            .retry_on_failure(10, 0.5)
            .with_json({"trace_id": "$foo", "diff": "${pyexp(int(foo) - timestamp)}"})
            .validate()
            .assert_greater_than("body.json.diff", 5000)
        ),
    ]


class TestCaseRequestWithRetry(HttpRunner):

    config = (
        Config("request methods testcase with retry")
        .variables(
            **{
                "foo1": "config_bar1",
                "foo2": "config_bar2",
                "expect_foo1": "config_bar1",
                "expect_foo2": "config_bar2",
                "array": [],
            }
        )
        .base_url("https://postman-echo.com")
        .verify(False)
        .export(*["foo3"])
    )

    teststeps = [
        Step(
            RunRequest("get with params and retry 3 times")
            .retry_on_failure(3, 0.5)
            .with_variables(**{"foo1": "bar11", "foo2": "bar21"})
            .post("/post")
            .with_json({"foo1": "$foo1", "foo2": "$foo2", "array": "$array"})
            .teardown_hook("${pyexp(array.append(1))}")
            .extract()
            .with_jmespath("body.json.foo2", "foo3")
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal("body.json.foo1", "bar11")
            .assert_equal("body.json.foo2", "bar21")
            .assert_equal("body.json.array", [1, 1, 1])
        )
    ]


if __name__ == "__main__":
    TestCaseRequestWithRetry().test_start()
